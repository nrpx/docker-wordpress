version: "3"

services:

  # WordPress FPM
  # This is the WordPress service with php-fpm. It could be replaced with the
  # Apache WordPress image but Nginx typically offers better static file performance.
  wordpress:
    depends_on:
      db:
        condition: service_healthy
    # build: ./wordpress
    image: wordpress:${WORDPRESS_VERSION:-6-fpm-alpine}
    restart: always
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_NAME: ${DB_NAME:-wordpress}
      WORDPRESS_DB_USER: ${DB_USER:-wordpress}
      WORDPRESS_DB_PASSWORD: ${DB_PASS:-password}
      WORDPRESS_DEBUG: ${WP_DEBUG:-0}
      WORDPRESS_TABLE_PREFIX: ${WP_TABLE_PREFIX:-wp_}
      WORDPRESS_CONFIG_EXTRA: |
        /* Redis Ojbect Cache */
        define( 'WP_REDIS_HOST', 'redis' );
        define( 'WP_REDIS_PORT', 6379 );
        /* Nginx Cache */
        /* define( 'RT_WP_NGINX_HELPER_CACHE_PATH', '/var/run/nginx-cache' ); */
    volumes:
      - wp_root:/var/www/html
      - ${DATA_PATH:-/opt/project}/wp_data:/var/www/html/wp-content
      # - ./wordpress/plugins:/var/www/html/wp-content/plugins
      # - ./wordpress/themes:/var/www/html/wp-content/themes
      - ./.docker/php/custom.ini:/usr/local/etc/php/conf.d/custom.ini

  # WordPress CLI
  # Manage your WordPress installation with the WP CLI. Under the scripts folder,
  # this service is being used to sync the database and uploads from a production
  # server.
  # wpcli:
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   image: wordpress:cli
  #   user: xfs
  #   environment:
  #     WORDPRESS_DB_HOST: db:3306
  #     WORDPRESS_DB_NAME: ${DB_NAME:-wordpress}
  #     WORDPRESS_DB_USER: ${DB_USER:-wordpress}
  #     WORDPRESS_DB_PASSWORD: ${DB_PASS:-password}
  #     WORDPRESS_CONFIG_EXTRA: |
  #       /* Redis Ojbect Cache */
  #       define( 'WP_REDIS_HOST', 'redis' );
  #       define( 'WP_REDIS_PORT', 6379 );
  #       /* Nginx Cache */
  #       define( 'RT_WP_NGINX_HELPER_CACHE_PATH', '/var/run/nginx-cache' );
  #   volumes:
  #     - wp_data:/var/www/html
  #     - ./wordpress/plugins:/var/www/html/wp-content/plugins
  #     - ./wordpress/themes:/var/www/html/wp-content/themes
  #   networks:
  #     - wordpress

  # MariaDB
  # This MariaDB service adds a database for the WordPress application.
  db:
    image: mariadb:${MARIADB_VERSION:-10}
    volumes:
      - ${DATA_PATH:-/opt/project}/db:/var/lib/mysql
      - ./.docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: ${DB_NAME:-wordpress}
      MYSQL_USER: ${DB_USER:-wordpress}
      MYSQL_PASSWORD: ${DB_PASS:-password}
    healthcheck:
      test: mariadb-admin -uroot --password=${DB_ROOT_PASSWORD:-password} ping
      interval: 5s
      retries: 10

  # Redis
  # This stack uses Redis as a Database Object Cache for WordPress
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    restart: always
    volumes:
      - ${DATA_PATH:-/opt/project}/redis:/data

  nginx:
    depends_on:
      - wordpress
    image: nginx:${NGINX_VERSION:-stable-alpine-slim}
    restart: always
    environment:
      - NGINX_HOST=${NGINX_HOST:-wordpress.local}
    volumes:
      - wp_root:/var/www/html
      - ${DATA_PATH:-/opt/project}/wp_data:/var/www/html/wp-content
      # - ./wordpress/plugins:/var/www/html/wp-content/plugins
      # - ./wordpress/themes:/var/www/html/wp-content/themes
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - default
      - npm_nw

  # Watchtower
  # Automatically pull new docker images as they're updated. This is useful for
  # private sites behind a VPN that don't have public access to tools like webhooks
  # for deploying changes. It's important to lock down your versions to major ranges.
  # watchtower:
  #   image: containrrr/watchtower:latest
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: --interval 30

volumes:
  wp_root:

networks:
  npm_nw:
    external: true
